/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package us.physion.ovation.dbconnection;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.*;
import org.openide.util.Exceptions;
import us.physion.ovation.interfaces.EventQueueUtilities;
import us.physion.ovation.interfaces.IUpdateUI;
import us.physion.ovation.interfaces.ModalDialogBase;

/**
 *
 * @author huecotanks
 */
public class UpdaterInProgressDialog extends ModalDialogBase implements IUpdateUI, CancellableDialog{

    
    private UpgradeTool tool;
    /**
     * Creates new form UpdaterInProgressDialog
     */
    public UpdaterInProgressDialog() {
        super();
        initComponents();
        
        this.getRootPane().setDefaultButton(cancelButton);
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "CANCEL");
        getRootPane().getActionMap().put("CANCEL", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                cancel();
            }
        });
    }
    
    public void setUpgradeTool(UpgradeTool t)
    {
        tool = t;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();
        forceButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(UpdaterInProgressDialog.class, "UpdaterInProgressDialog.title")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(UpdaterInProgressDialog.class, "UpdaterInProgressDialog.jLabel1.text")); // NOI18N

        cancelButton.setText(org.openide.util.NbBundle.getMessage(UpdaterInProgressDialog.class, "UpdaterInProgressDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        forceButton.setText(org.openide.util.NbBundle.getMessage(UpdaterInProgressDialog.class, "UpdaterInProgressDialog.forceButton.text")); // NOI18N
        forceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(layout.createSequentialGroup()
                            .add(31, 31, 31)
                            .add(jLabel1)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(forceButton))
                        .add(layout.createSequentialGroup()
                            .add(23, 23, 23)
                            .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 573, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(forceButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(cancelButton)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    boolean cancelled = false;
    public boolean isCancelled()
    {
        return cancelled;
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (cancelButton.getText().toLowerCase().equals("cancel"))
            cancel();
        else if (cancelButton.getText().toLowerCase().equals("finished")){
            cancelled = false;
            disposeOnEDT();
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void forceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceButtonActionPerformed
        AreYouSureDialog d = new AreYouSureDialog();
        d.showDialog();
        if (!d.isCancelled())
        {
            showContinueButton(false);

            if (tool != null)
                tool.forceUpdate();
        }
    }//GEN-LAST:event_forceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdaterInProgressDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdaterInProgressDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdaterInProgressDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdaterInProgressDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                UpdaterInProgressDialog dialog = new UpdaterInProgressDialog();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        e.getWindow().dispose();
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton forceButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    public void showContinueButton(final boolean show)
    {
        EventQueueUtilities.runOnEDT(new Runnable() {

            @Override
            public void run() {
                forceButton.setVisible(show);
                forceButton.setEnabled(show);
            }
        });
        
    }
    
    public void showDialog()
    {
        //try {
            EventQueueUtilities.runOnEDT(new Runnable(){

                @Override
                public void run() {
                    UpdaterInProgressDialog.this.setLocationRelativeTo(null);
                    UpdaterInProgressDialog.this.pack();
                    UpdaterInProgressDialog.this.setVisible(true);
                }
            });
       /* } catch (InterruptedException ex) {
            cancelled = true;
            this.disposeOnEDT();
            Exceptions.printStackTrace(ex);
        }*/
    }
    
    @Override
    public void update(final int i, final String string) {
        
        Runnable r = new Runnable(){

            @Override
            public void run() {
   
                if (i < 0) {
                    progressBar.setIndeterminate(true);
                } else {
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(i);
                }
                if (string != null) {
                    //TODO: change the updater interface
                    if (string.equals("Initializing")) {
                        showContinueButton(false);
                    }
                    System.out.println("Update jar: " + string);
                    jLabel1.setText(string);
                }
            }
        };

        EventQueueUtilities.runOnEDT(r);
        
        if (i >= 100)
        {
            EventQueueUtilities.runOnEDT(new Runnable(){

                @Override
                public void run() {
                    cancelButton.setText("Finished");
                    cancelButton.setFocusPainted(true);
                }
            });
        }
    }
    
    @Override
    public void cancel()
    {
        cancelled = true;
        //TODO: should we be able to force quit the java process that is running the update?
        disposeOnEDT();
    }
}
